"""
Module for sending Forex analysis and trading signals to Telegram.
This module handles Telegram bot functionality for notifications and alerts.
"""

import logging
import asyncio
from telegram import Bot
from telegram.error import TelegramError
import os
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID

# Configure logger
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

async def send_message_async(message, chat_id=None):
    """
    Send a message to a Telegram chat asynchronously.
    
    Args:
        message (str): The message to send
        chat_id (str, optional): Chat ID to send the message to.
                               If None, uses the default chat ID from config.
                               
    Returns:
        bool: True if successful, False otherwise
    """
    try:
        if not TELEGRAM_BOT_TOKEN:
            logger.error("Telegram bot token not configured")
            return False
            
        bot = Bot(token=TELEGRAM_BOT_TOKEN)
        target_chat_id = chat_id or TELEGRAM_CHAT_ID
        
        if not target_chat_id:
            logger.error("Telegram chat ID not configured")
            return False
        
        await bot.send_message(chat_id=target_chat_id, text=message, parse_mode='HTML')
        logger.info(f"Message sent to Telegram chat {target_chat_id}")
        return True
    except TelegramError as e:
        logger.error(f"Error sending Telegram message: {str(e)}")
        return False
    except Exception as e:
        logger.error(f"Unexpected error sending Telegram message: {str(e)}")
        return False

def send_message(message, chat_id=None):
    """
    Send a message to a Telegram chat (synchronous wrapper).
    
    Args:
        message (str): The message to send
        chat_id (str, optional): Chat ID to send the message to.
                               If None, uses the default chat ID from config.
                               
    Returns:
        bool: True if successful, False otherwise
    """
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        result = loop.run_until_complete(send_message_async(message, chat_id))
        loop.close()
        return result
    except Exception as e:
        logger.error(f"Error in send_message: {str(e)}")
        return False

def send_price_alert(symbol, price, alert_type, prediction=None):
    """
    Send a price alert message to Telegram.
    
    Args:
        symbol (str): The forex pair symbol
        price (float): The current price
        alert_type (str): Type of alert (e.g., 'resistance_broken', 'support_broken')
        prediction (str, optional): Any prediction text to include
        
    Returns:
        bool: True if successful, False otherwise
    """
    alert_emoji = "🔔"
    if alert_type.lower() == "buy":
        alert_emoji = "🟢"
    elif alert_type.lower() == "sell":
        alert_emoji = "🔴"
    elif "resistance" in alert_type.lower():
        alert_emoji = "⬆️"
    elif "support" in alert_type.lower():
        alert_emoji = "⬇️"
    
    message = f"{alert_emoji} <b>FOREX ALERT: {symbol}</b>\n\n"
    message += f"<b>Type:</b> {alert_type}\n"
    message += f"<b>Price:</b> {price:.5f}\n"
    
    if prediction:
        message += f"\n<b>Prediction:</b> {prediction}\n"
    
    message += f"\n<i>Generated by Forex Analysis & Prediction System</i>"
    
    return send_message(message)

def send_ml_prediction(symbol, prediction_data, confidence, timeframe):
    """
    Send a machine learning prediction alert to Telegram.
    
    Args:
        symbol (str): The forex pair symbol
        prediction_data (dict): Dictionary containing prediction details
        confidence (float): Confidence level of the prediction (0-1)
        timeframe (str): Prediction timeframe
        
    Returns:
        bool: True if successful, False otherwise
    """
    # Determine sentiment emoji
    emoji = "⚪️"
    direction = "NEUTRAL"
    
    pred_value = prediction_data.get('prediction', 0)
    if isinstance(pred_value, (int, float)):
        if pred_value > 0.55:  # Bullish with some confidence buffer
            emoji = "🟢"
            direction = "BULLISH"
        elif pred_value < 0.45:  # Bearish with some confidence buffer
            emoji = "🔴"
            direction = "BEARISH"
    
    # Format confidence as percentage
    confidence_pct = confidence * 100
    
    # Create message
    message = f"{emoji} <b>ML PREDICTION: {symbol}</b>\n\n"
    message += f"<b>Direction:</b> {direction}\n"
    message += f"<b>Confidence:</b> {confidence_pct:.2f}%\n"
    message += f"<b>Timeframe:</b> {timeframe}\n\n"
    
    # Add model information if available
    model_name = prediction_data.get('model_name', 'Unknown Model')
    message += f"<b>Model:</b> {model_name}\n"
    
    # Add feature importance if available
    features = prediction_data.get('top_features', [])
    if features:
        message += "\n<b>Top Features:</b>\n"
        for i, (feature, importance) in enumerate(features[:3], 1):
            message += f"{i}. {feature}: {importance:.4f}\n"
    
    message += f"\n<i>Generated by Forex Analysis & Prediction System</i>"
    
    return send_message(message)

def send_trading_signal(symbol, signal_type, price, strategy, params=None):
    """
    Send a trading signal alert to Telegram.
    
    Args:
        symbol (str): The forex pair symbol
        signal_type (str): 'BUY', 'SELL', or 'NEUTRAL'
        price (float): Current price at signal
        strategy (str): Strategy that generated the signal
        params (dict, optional): Additional parameters for the alert
        
    Returns:
        bool: True if successful, False otherwise
    """
    # Set emoji based on signal type
    emoji = "⚪️"
    if signal_type.upper() == "BUY":
        emoji = "🟢"
    elif signal_type.upper() == "SELL":
        emoji = "🔴"
    
    # Create message
    message = f"{emoji} <b>TRADING SIGNAL: {symbol}</b>\n\n"
    message += f"<b>Signal:</b> {signal_type.upper()}\n"
    message += f"<b>Price:</b> {price:.5f}\n"
    message += f"<b>Strategy:</b> {strategy}\n"
    
    # Add any additional parameters
    if params:
        message += "\n<b>Parameters:</b>\n"
        for key, value in params.items():
            message += f"- {key}: {value}\n"
    
    # Add timestamp
    from datetime import datetime
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    message += f"\n<i>Signal generated at {timestamp}</i>"
    message += f"\n<i>Generated by Forex Analysis & Prediction System</i>"
    
    return send_message(message)

def send_lstm_prediction(symbol, prediction, actual=None, confidence=None, horizon=None):
    """
    Send an LSTM model prediction to Telegram.
    
    Args:
        symbol (str): The forex pair symbol
        prediction (float): Predicted price or direction
        actual (float, optional): Actual price if available
        confidence (float, optional): Confidence level (0-1)
        horizon (str, optional): Prediction timeframe
        
    Returns:
        bool: True if successful, False otherwise
    """
    # Determine sentiment emoji based on prediction
    emoji = "⚪️"
    if prediction > 0:
        emoji = "🟢"
    elif prediction < 0:
        emoji = "🔴"
    
    # Format confidence as percentage if available
    confidence_str = "N/A"
    if confidence is not None:
        confidence_str = f"{confidence * 100:.2f}%"
    
    # Create message
    message = f"{emoji} <b>LSTM PREDICTION: {symbol}</b>\n\n"
    
    if prediction > 0:
        message += f"<b>Direction:</b> BULLISH\n"
    elif prediction < 0:
        message += f"<b>Direction:</b> BEARISH\n"
    else:
        message += f"<b>Direction:</b> NEUTRAL\n"
    
    message += f"<b>Confidence:</b> {confidence_str}\n"
    
    if horizon:
        message += f"<b>Prediction Horizon:</b> {horizon}\n"
    
    if actual is not None:
        message += f"<b>Current Price:</b> {actual:.5f}\n"
    
    message += f"\n<b>Model:</b> LSTM Neural Network\n"
    message += f"\n<i>Generated by Forex Analysis & Prediction System</i>"
    
    return send_message(message)

def is_telegram_configured():
    """
    Check if Telegram is properly configured.
    
    Returns:
        bool: True if Telegram bot token and chat ID are configured, False otherwise
    """
    return bool(TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID)